#Include "debug.inc"

<#Module=Main>
Dim rtc

'---------------------------------------
Sub Load(cmdLine)
	Dim pfn, i, d
	
    form.caption = "Runtime Tiny C Compiler"
    form.width = 9600
    form.height = 7200

    form.add "mtext", 1, ".move 0, 0, form.scalewidth, form.scaleheight", ".backcolor=0", ".forecolor=QBColor(10)", ".fontsize=14"

    form.center
    form.show
  
	Set rtc = sys.newrtc


    pfn = rtc.Compile("main(){  int v;   v = GlobalAlloc(0x40, 148);   *(int *)v = 148;   GetVersionExA(v);   return *(int *)(v + 4) * 100 + *(int *)(v + 8); }").ptrFunc
	
    txt = txt & sys.str.rpt("-",64) & vbcrlf & "main = " & rtc() & vbTab & Hex(rtc.Ptr("main")) & " = " & Hex(pfn) & vbcrlf & vbcrlf


    pfn = rtc.Compile( "mul(a, b) { return a*b; }").ptrFunc
	
	txt = txt & sys.str.rpt("-",64) & vbcrlf & "mul  = " & rtc(13, 20) & vbTab & Hex(rtc.Ptr("mul")) & " = " & Hex(pfn) & vbcrlf & vbcrlf
	

    rtc.Free
	
    
    sExpr = "(3.5) + 2.9*(2+(1+2))"
    timegettime true
    For i = 1 To 10000
        d = SimpleEval(sExpr)
    Next
	t1 = timegettime(false)
	txt = txt & sys.str.rpt("-",64) & vbcrlf & "eval = " & d & vbTab & vbTab & round(t1,0) & " ms." & vbcrlf

	form.mtext(1).text = txt

	Debug rtc
End Sub

'---------------------------------------
Function SimpleEval(sText)
    If rtc.State(31) = 0 Then rtc.State(31) = rtc.Compile(sys.resource("se").data).ptrFunc
	SimpleEval = cdbl(0)  :   rtc.Ptr(rtc.State(31), true).Run sText, VarPtr(SimpleEval) + 8
End Function
<#Module>


<#Form=form>
'-----------------------------------------
Sub Form_unload()
  endmf
End Sub
<#form>


<#res id="se" #>
#define TOK_FINAL     0
#define TOK_RPAREN    1
#define TOK_ADD       2
#define TOK_MOD       3
#define TOK_IDIV      4
#define TOK_MUL       5
#define TOK_UNARY     6
#define TOK_POWER     7
#define TOK_LPAREN    8
#define TOK_NUM       9
#define TOK_WHITE     10

int lookup[256];

simple_eval(s, pdbl)
{
    int i, p, l, ch, prec, prev_pr;
    int op_stack, op_idx;
    int val_stack, val_idx;
    int num_size;

    op_idx  = op_stack  = alloca(4000);
    val_idx = val_stack = alloca(8000);
    l = &lookup;
    if (*(char *)(l + 32) == 0) {
        p = l;
        i = 0;
        while (i < 256) {
            *(char *)p++ = TOK_WHITE;
            i++;
        }
        *(char *)(l + '(') = TOK_LPAREN;
        *(char *)(l + ')') = TOK_RPAREN;
        *(char *)(l + '+') = TOK_ADD;
        *(char *)(l + '-') = TOK_ADD;
        *(char *)(l + '*') = TOK_MUL;
        *(char *)(l + '/') = TOK_MUL;
        *(char *)(l + '^') = TOK_POWER;
        *(char *)(l + '\\') = TOK_IDIV;
        *(char *)(l + '%') = TOK_MOD;
        *(char *)(l + '.') = TOK_NUM;
        p = l + '0';
        i = '0';
        while (i <= '9') {
            *(char *)p++ = TOK_NUM;
            i++;
        }
    }
    prev_pr = 0;
    p = s;
    while ((ch = *(short *)p)) {
        if (!(ch >> 8)) {
            prec = *(char *)(l + ch);
            if (prec != TOK_WHITE) {
                if (prec == TOK_NUM) {
                    val_idx = val_idx + 8;
                    parse_num(p, val_idx, &num_size);
                    p = p + ((num_size-1) << 1);
                } else if (prec == TOK_ADD) {
                    if (prev_pr >= TOK_ADD && prev_pr < TOK_NUM)
                        prec = TOK_UNARY;
                }
                if (prec >= TOK_ADD && prec < TOK_NUM) {
                    if(prec != TOK_UNARY)
                        eval_stack(prec, op_stack, &op_idx, val_stack, &val_idx);
                    op_idx = op_idx + 4;
                    *(int *)op_idx = (prec << 16) + ch;
                }
                prev_pr = prec;
            }
        }
        p++; p++;
    }
    eval_stack(TOK_FINAL, op_stack, &op_idx, val_stack, &val_idx);
    *(int *)pdbl = *(int *)val_idx;
    *(int *)(pdbl + 4) = *(int *)(val_idx + 4);
}

#define ASM_MOV_EAX_    _asm mov eax,
#define ASM_ADD_EAX_    _asm _emit 0x83 _asm _emit 0xc0 _asm _emit
#define ASM_SUB_EAX_    _asm _emit 0x83 _asm _emit 0xe8 _asm _emit
#define ASM_FSTP_EAX    _asm _emit 0xdd _asm _emit 0x18
#define ASM_FLD_EAX     _asm _emit 0xdd _asm _emit 0x00
#define ASM_FLD_EAX_    _asm _emit 0xdd _asm _emit 0x40 _asm _emit
#define ASM_FADD_EAX_   _asm _emit 0xdc _asm _emit 0x40 _asm _emit
#define ASM_FSUB_EAX_   _asm _emit 0xdc _asm _emit 0x60 _asm _emit
#define ASM_FMUL_EAX_   _asm _emit 0xdc _asm _emit 0x48 _asm _emit
#define ASM_FDIV_EAX_   _asm _emit 0xdc _asm _emit 0x70 _asm _emit
#define ASM_FCHS        _asm _emit 0xd9 _asm _emit 0xe0
#define ASM_FILD_EAX    _asm _emit 0xdb _asm _emit 0x00
#define ASM_FISTP_EAX   _asm _emit 0xdb _asm _emit 0x18
#define ASM_FYL2X       _asm _emit 0xd9 _asm _emit 0xf1
#define ASM_FLD1        _asm _emit 0xd9 _asm _emit 0xe8
#define ASM_FLD_ST1     _asm _emit 0xd9 _asm _emit 0xc1
#define ASM_FPREM       _asm _emit 0xd9 _asm _emit 0xf8
#define ASM_F2XM1       _asm _emit 0xd9 _asm _emit 0xf0
#define ASM_FADDP_ST1   _asm _emit 0xde _asm _emit 0xc1
#define ASM_FSCALE      _asm _emit 0xd9 _asm _emit 0xfd

eval_stack(prec, op_stack, pop_idx, val_stack, pval_idx)
{
    int op_idx, val_idx, op, t1, pt1, t2, pt2;

    op_idx = *(int *)pop_idx;
    val_idx = *(int *)pval_idx;
    while (op_idx > op_stack) {
        if (*(int *)(op_idx) < (prec << 16))
            break;
        val_idx = val_idx - 8;
        op = *(short *)op_idx;
        if (op == '+') {
            if (*(int *)(op_idx) > (TOK_UNARY << 16)) {
                val_idx = val_idx + 8;
            } else {
                /* *(double *)val_idx = *(double *)val_idx + *(double *)(val_idx + 8); */
                ASM_MOV_EAX_(val_idx);
                ASM_FLD_EAX;
                ASM_FADD_EAX_(8);
                ASM_FSTP_EAX;
            }
        } else if (op == '-') {
            if (*(int *)(op_idx) > (TOK_UNARY << 16)) {
                val_idx = val_idx + 8;
                /* *(double *)val_idx = -*(double *)val_idx; */
                ASM_MOV_EAX_(val_idx);
                ASM_FLD_EAX;
                ASM_FCHS;
                ASM_FSTP_EAX;
            } else {
                /* *(double *)val_idx = *(double *)val_idx - *(double *)(val_idx + 8); */
                ASM_MOV_EAX_(val_idx);
                ASM_FLD_EAX;
                ASM_FSUB_EAX_(8);
                ASM_FSTP_EAX;
            }
        } else if (op == '*') {
            /* *(double *)val_idx = *(double *)val_idx * *(double *)(val_idx + 8); */
            ASM_MOV_EAX_(val_idx);
            ASM_FLD_EAX;
            ASM_FMUL_EAX_(8);
            ASM_FSTP_EAX;
        } else if (op == '/') {
            /* *(double *)val_idx = *(double *)val_idx / *(double *)(val_idx + 8); */
            ASM_MOV_EAX_(val_idx);
            ASM_FLD_EAX;
            ASM_FDIV_EAX_(8);
            ASM_FSTP_EAX;
        } else if (op == '^') {
            /* *(double *)val_idx = pow(*(double *)val_idx, *(double *)(val_idx + 8)); */
            ASM_MOV_EAX_(val_idx);
            ASM_ADD_EAX_(8);
            ASM_FLD_EAX;
            ASM_SUB_EAX_(8);
            ASM_FLD_EAX;
            ASM_FYL2X;
            ASM_FLD1;
            ASM_FLD_ST1;
            ASM_FPREM;
            ASM_F2XM1;
            ASM_FADDP_ST1;
            ASM_FSCALE;
            ASM_FSTP_EAX;
        } else if (op == '\\') {
            pt1 = &t1;
            /* *(double *)val_idx = (int)(*(double *)val_idx / *(double *)(val_idx + 8)); */
            ASM_MOV_EAX_(val_idx);
            ASM_FLD_EAX;
            ASM_FDIV_EAX_(8);
            ASM_MOV_EAX_(pt1);
            ASM_FISTP_EAX;
            ASM_FILD_EAX;
            ASM_MOV_EAX_(val_idx);
            ASM_FSTP_EAX;
        } else if (op == '%') {
            pt1 = &t1;
            pt2 = &t2;
            /* *(double *)val_idx = (int)*(double *)val_idx % (int)*(double *)(val_idx + 8); */
            ASM_MOV_EAX_(val_idx);
            ASM_FLD_EAX;
            ASM_MOV_EAX_(pt1);
            ASM_FISTP_EAX;
            ASM_MOV_EAX_(val_idx);
            ASM_ADD_EAX_(8);
            ASM_FLD_EAX;
            ASM_MOV_EAX_(pt2);
            ASM_FISTP_EAX;
            t1 = t1 % t2;
            ASM_MOV_EAX_(pt1);
            ASM_FILD_EAX;
            ASM_MOV_EAX_(val_idx);
            ASM_FSTP_EAX;
        } else if (op == '(') {
            val_idx = val_idx + 8;
            if (prec == TOK_RPAREN) {
                op_idx = op_idx - 4;
                break;
            } else if (prec > TOK_RPAREN)
                break;
        }
        op_idx = op_idx - 4;
    }
    *(int *)pval_idx = val_idx;
    *(int *)pop_idx = op_idx;
}

#define PARSE_FLAGS_DEFAULT 0xB14
#define VTBIT_R8 0x20

parse_num(s, pdbl, psize)
{
    int numparse, dig, variant_res;

    numparse = alloca(24);
    dig = alloca(30);
    variant_res = alloca(16);
    *(int *)numparse = 30;
    *(int *)(numparse + 4) = PARSE_FLAGS_DEFAULT;
    if (!VarParseNumFromStr(s, 0, 0, numparse, dig)) {
        if (!VarNumFromParseNum(numparse, dig, VTBIT_R8, variant_res)) {
            *(int *)pdbl = *(int *)(variant_res + 8);
            *(int *)(pdbl + 4) = *(int *)(variant_res + 12);
            *(int *)psize = *(int *)(numparse + 12); /* cchUsed */
            return;
        }
    }
    *(int *)pdbl = 0;
    *(int *)(pdbl + 4) = 0;
    *(int *)psize = 1;
}
<#res#>
