<#Module=mdlDemo>
Dim Ver, Res, tm, Norm, Fast1, Fast2, Out

Const porog1 = 10, porog2 = 200

'------------------------------------------
Sub Load(cmdLine)
    sys.ext.setpriority &H80
 
    Form.Caption = "Benchmark Engine"
    Form.Width = 8000
    Form.Height = 6000
    Form.AutoRedraw = True
    Form.Center

    For a = 0 To Form.Height
      clr = 255 - int((a/(form.scaleheight))*255)
      If clr < 0 Then clr = 0
      GLine Form, 0, a, Form.scaleWidth, a, RGB(0, 0, clr)
    Next


    Set Res = sys.newcollection


    '-------------------------------------------------------
    TStart  :  TStop Class1.Test(34, 0), "Native"
    TStart  :  TStop Class1.Test(34, 1), "Fast"

    '-------------------------------------------------------
    TStart  :  TStop JS2.Test(34, 0), "Native"
    TStart  :  TStop JS2.Test(34, 1), "Fast"
    
    '-------------------------------------------------------
	TStart  :  TStop VB.Test(34, 0), "Native"
	TStart  :  TStop VB.Test(34, 1), "Fast"
    
    '-------------------------------------------------------
    TStart  :  TStop JS1.Test(34, 0), "Native"
    TStart  :  TStop JS1.Test(34, 1), "Fast"
	
    '---------------------------------------------------------
	sys.conv.str2file out, "out.txt"
	
	
    '---------------------------------------------------------
    i = 0
    For Each v In Sort(Res)
        With Form.Add("label", i * 2 + 1, ".Caption = Empty", ".BackStyle = 1", ".ForeColor = QBColor(15)")
            If v(1) < porog1 Then
                c = QBColor(5)  :  m = Fast1
            ElseIf v(1) < porog2 Then
                c = QBColor(3)  :  m = Fast2
            Else
                c = QBColor(2)  :  m = Norm
            End If
            .BackColor = c
            .Move 160, 400 + i * 600, ((Form.scaleWidth - 320) * m) / (v(1)), 360
        End With

        With Form.Add("label", i * 2 + 2,  ".ForeColor = QBColor(15)", ".ZOrder 0")
            On Error Resume Next  :  .FontName = "Lucida Console"  :  .FontSize = 9  :  On Error Goto 0
            .Move 220, 480 + i * 600, 1000, 360
            .Caption = Text(18, "Time = " & v(1) & " ms.") & v(0)
        End With
        
        i = i + 1
    Next

    Form.Show
End Sub

'------------------------------------------
Sub TStart()
    DoEvents
    tm = timeGetTime
End Sub

'------------------------------------------
Sub TStop(buf, txt)
    tm = timeGetTime - tm  :  if tm <= 0 then tm = 1
    If tm < porog1 Then
        If Fast1 = Empty or tm < Fast1 Then Fast1 = tm
    ElseIf tm < porog2 Then
        If Fast2 = Empty or tm < Fast2 Then Fast2 = tm
    Else
        If Norm = Empty or tm < Norm Then Norm = tm
    End If
    Res.Add Array(Text(30, Ver) + txt, tm)
    out = out + cstr(buf) + vbtab + vbtab + cstr(tm) + vbtab + Ver + "   (" + txt + ")" + vbcrlf
End Sub

'------------------------------------------
Function Sort(c)
	Dim n, m, i, v
	Set n = sys.newcollection

	while c.count
		m = &H7FFFFFFF
		For i = 1 To c.count
			If c(i)(1) < m Then m = c(i)(1)  :  v = i 
		Next
		n.add c(v)
		c.remove(v)
	wend
	
	Set Sort = n
End Function

'------------------------------------------
Function Text(w, txt)
    Text = txt  :  while Len(Text) < w  :  Text = Text + " "  :  wend
End Function
<#Module>


<#form=form>
Sub Form_Unload()
  endmf
End Sub
<#form>


<#Script=VB,VBScript#>
    Function Test(b, t)
        VB.Ver = ScriptEngine & " = " & ScriptEngineMajorVersion & "." & ScriptEngineMinorVersion & "." & ScriptEngineBuildVersion
		if t then Test = fibF(b) else Test = fibN(b)
    End Function

    Function fibN(n)
        if n < 2 then fibN = n else fibN = fibN(n-2) + fibN(n-1)
    End Function
    
    Function fibF(n)
        dim a, b, i, c
		a = 1  :  b = 1
        for i = 3 to n
			c = a + b
			a = b
			b = c
		next
		fibF = b
    End Function
<#Script#>


<#Script=JS1#>
    function Test(b, t) {
        JS1.Ver = ScriptEngine() + " = " + ScriptEngineMajorVersion() + "." + ScriptEngineMinorVersion() + "." + ScriptEngineBuildVersion();
        if (t) return fibF(b); else return fibN(b);
    }

	function fibN(n) {
		if (n < 2) return n;
		return (fibN(n-2) + fibN(n-1));
	}
    
    function fibF(n) {
		var a = 1, b = 1;
		for (var i = 3; i <= n; i++) {
			var c = a + b;
			a = b;
			b = c;
		}
		return b;
	}
<#Script#>


<#Script=JS2,chakra#>
    function Test(b, t) {
        JS2.Ver = ScriptEngine() + " = " + ScriptEngineMajorVersion() + "." + ScriptEngineMinorVersion() + "." + ScriptEngineBuildVersion();
        if (t) return fibF(b); else return fibN(b);
    }
	
	function fibN(n) {
		if (n < 2) return n;
		return (fibN(n-2) + fibN(n-1));
	}
	
	function fibF(n) {
		var a = 1, b = 1;
		for (var i = 3; i <= n; i++) {
			var c = a + b;
			a = b;
			b = c;
		}
		return b;
	}
<#Script#>

<#VBNet instance="Class1" start="main" #>
Imports System
Imports Microsoft.VisualBasic

public Module modMain
    Public LMF as Object
    Public Sub Main(Byval Obj as Object)
        LMF = Obj
    End Sub
End Module

Public Class Class1
    Public Function Test(byval b as integer, byval t as integer) As integer
        LMF.Script.CodeObject.Ver = "VB.NET = " + Environment.Version.ToString()
		if t then return fibF(b) else return fibN(b)
    End Function

	Private Function fibN(byval n as integer) As integer
		if n < 2 then return n
		return fibN(n-2) + fibN(n-1)
    End Function

	Private Function fibF(byval n as integer) As integer
        dim a as integer = 1, b as integer = 1, i as integer, c as integer
		for i = 3 to n
			c = a + b
			a = b
			b = c
		next
		return b
    End Function	
End Class
<#VBNet#>
