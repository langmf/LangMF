<#Module=mdlDemo>
Dim Ver, Res, tm, fn, Norm, Fast

Const porog = 50

Sub Load(cmdLine)
    sys.ext.setpriority &H80
 
    Form.Caption = "Benchmark Engine"
    Form.Width = 8000
    Form.Height = 4000
    Form.AutoRedraw = True
    Form.Center

    For a = 0 To Form.Height
      clr = 255 - int((a/(form.scaleheight))*255)
      If clr < 0 Then clr = 0
      GLine Form, 0, a, Form.scaleWidth, a, RGB(0, 0, clr)
    Next

    sys.gdi.savebmp "..\src\test2.jpg", "test.bmp"
    b = sys.conv.buf(sys.conv.file2buf("test.bmp"))
    
    Set Res = sys.newcollection


    '-------------------------------------------------------
    TStart  :  TStop Class1.Test(sys.conv.buf(b, 8209)), "Native"

    '-------------------------------------------------------
    TStart  :  TStop VB.Test(b), "Native"

    '-------------------------------------------------------
    TStart  :  TStop JS2.Test(b), "toHex"
    
    '-------------------------------------------------------
    TStart  :  TStop JS1.Test(b), "toHex"

    '-------------------------------------------------------
    TStart  :  TStop JS1.Test(b, true), "Invoke"


    '---------------------------------------------------------
    i = 0
    For Each v In Res
        With Form.Add("label", i * 2 + 1, ".Caption = Empty", ".BackStyle = 1", ".ForeColor = QBColor(15)")
            If v(1) > 50 Then c = QBColor(2)  :  m = Norm  : Else :  c = QBColor(5)  :  m = Fast
            .BackColor = c
            .Move 160, 400 + i * 600, ((Form.scaleWidth - 320) * m) / (v(1)), 360
        End With

        With Form.Add("label", i * 2 + 2,  ".ForeColor = QBColor(15)", ".ZOrder 0")
            On Error Resume Next  :  .FontName = "Lucida Console"  :  .FontSize = 9  :  On Error Goto 0
            .Move 220, 480 + i * 600, 1000, 360
            .Caption = Text(18, "Time = " & v(1) & " ms.") & v(0)
        End With
        
        i = i + 1
    Next

    Form.Show
End Sub

Sub TStart()
    DoEvents
    tm = timeGetTime
End Sub

Sub TStop(buf, txt)
    tm = timeGetTime - tm  :  if tm <= 0 then tm = 1
    If tm > porog Then
        If Norm = Empty or tm < Norm Then Norm = tm
    Else
        If Fast = Empty or tm < Fast Then Fast = tm
    End If
    Res.Add Array(Text(30, Ver) + txt, tm)
    fn = fn + 1
    sys.conv.buf2file buf, "out" & fn & ".bmp"
End Sub

Function Text(w, txt)
    Text = txt  :  while Len(Text) < w  :  Text = Text + " "  :  wend
End Function
<#Module>


<#form=form>
Sub Form_Unload()
  endmf
End Sub
<#form>


<#Script=VB,VBScript#>
    Function Test(ByVal b)
        dim a
        
        for a = 54 to ubound(b) - 2 step 3
            b(a + 1) = b(a)
            b(a + 2) = b(a)
        next
        
        Test = b
        
        VB.Ver = ScriptEngine & " = " & ScriptEngineMajorVersion & "." & ScriptEngineMinorVersion & "." & ScriptEngineBuildVersion
    End Function
<#Script#>


<#Script=JS1#>
    function Test(b, t) {
        b = new VBArray(b).toArray();
        var s = b.length - 2
        for (var a = 54; a < s; a += 3) {
            b[a + 1] = b[a]
            b[a + 2] = b[a]
        }
        JS1.Ver = ScriptEngine() + " = " + ScriptEngineMajorVersion() + "." + ScriptEngineMinorVersion() + "." + ScriptEngineBuildVersion();
        if (t) return JS1.Sys.Conv.ArrayJS(b);
        return JS1.Sys.Conv.Hex2Buf(toHex(b));
    }

    function toHex(b) {
        var n1, n2, out = '', x = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];
        for (var i = 0; i < b.length; i++) { n2 = b[i];    n1 = n2 >> 4;    n2 &= 15;    out = out + x[n1] + x[n2]; }
        return out;
    }
<#Script#>


<#Script=JS2,chakra#>
    function Test(b) {
        b = new VBArray(b).toArray();
        var s = b.length - 2
        for (var a = 54; a < s; a += 3) {
            b[a + 1] = b[a]
            b[a + 2] = b[a]
        }
        JS2.Ver = ScriptEngine() + " = " + ScriptEngineMajorVersion() + "." + ScriptEngineMinorVersion() + "." + ScriptEngineBuildVersion();
        return JS2.Sys.Conv.Hex2Buf(toHex(b));
    }

    function toHex(b) {
        var n1, n2, out = '', x = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];
        for (var i = 0; i < b.length; i++) { n2 = b[i];    n1 = n2 >> 4;    n2 &= 15;    out = out + x[n1] + x[n2]; }
        return out;
    }
<#Script#>

<#VBNet instance="Class1" start="main" #>
Imports System
Imports Microsoft.VisualBasic

public Module modMain
    Public LMF as Object
    Public Sub Main(Byval Obj as Object)
        LMF = Obj
    End Sub
End Module

Public Class Class1
    Public Function Test(value) As Object
        dim a as integer, b() As Byte = value

        for a = 54 to ubound(b) - 2 step 3
            b(a + 1) = b(a)
            b(a + 2) = b(a)
        next

        Test = b  :  LMF.Script.CodeObject.Ver = "VB.NET = " + Environment.Version.ToString()
    End Function
End Class
<#VBNet#>
